(()=>{var e={857:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EnforceFileFolderNamingConvention=void 0;const o=(0,i(752).__importDefault)(i(17)),a=i(638),r=i(733);class n extends a.Command{async execute(){const e=["node_modules","dist",".git",".idea",".gitkeep",".eslintrc",".cache","README","LICENSE","CONTRIBUTING","dockerfiles","Dockerfile"],t=/[A-Z]/gm,i=[];function a(a){const r=o.default.basename(a).replace(/\.[^/.]+$/,"");r.length>0&&!e.includes(r)&&r.match(t)&&i.push(a)}const n=[];for await(const t of(0,r.walk)(o.default.join(__dirname,".."),e,n))a(t);for(const e of n)a(e);if(i.length>0){const e=`${i.length} files/directories do not respect the kebab-case convention enforced.`;console.error(e),console.error(i),process.exit(1)}console.info("Congratulations, all your files and directories are properly named!")}}t.EnforceFileFolderNamingConvention=n,n.paths=[["enforce-file-folder-naming-convention"]],n.usage=a.Command.Usage({category:"enforcers",description:"This script will make sure that your folders and file use kebab-case.",examples:[["A basic example","npm run stator-cli generate-cache-key-file"]]})},351:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EnforceValidImportsApi=void 0;const o=i(752),a=(0,o.__importDefault)(i(147)),r=(0,o.__importDefault)(i(17)),n=i(638),s=i(733);class c extends n.Command{async execute(){const e=/import .*stator\/[a-zA-Z]+\//gm,t=[];async function i(i){(await a.default.promises.readFile(i,{encoding:"utf-8"})).match(e)&&t.push(i)}for await(const e of(0,s.walk)(r.default.join(__dirname,"../apps/api/src"),[]))await i(e);if(t.length>0){const e=`${t.length} file(s) have invalid imports. They should NOT look like this: "@stator/models/something/entity"`;console.error(e),console.error(t),process.exit(1)}console.info("Congratulations, all your imports in api are valid!")}}t.EnforceValidImportsApi=c,c.paths=[["enforce-valid-imports-api"]],c.usage=n.Command.Usage({category:"enforcers",description:"This script will make sure that your imports are valid in the API. This is used to avoid import errors than can be hard to spot.",examples:[["A basic example","npm run stator-cli enforce-valid-imports-api"]]})},744:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GenerateCacheKeyFile=void 0;const o=i(752),a=(0,o.__importDefault)(i(147)),r=(0,o.__importDefault)(i(17)),n=i(638),s=(0,o.__importDefault)(i(897)),c=(0,o.__importDefault)(i(969)),l=(0,o.__importDefault)(i(546)),d=i(733);class p extends n.Command{async execute(){const e=r.default.join(__dirname,"../apps/webapp/src/redux/endpoints"),t=[],i=[];let o="/**\n * This file was automatically generated by tools/generators/generate-cache-file.js file\n */\n\nIMPORT_STATEMENTS\n\n";for await(const n of(0,d.walk)(e,[]))if(a.default.lstatSync(n).isFile()&&n.includes("-endpoints")){const e=(0,s.default)(r.default.basename(n,".ts").replace("-endpoints",""));i.push(e);const d=/build => \(({[\s\S]+overrideExisting: false,\s+})/m,p=/([a-z-A-Z]+): build.[qm]/gm,u=[...a.default.readFileSync(n,{encoding:"utf8"}).match(d)[1].matchAll(p)].map((e=>[e[1]])).flat();u.length>0&&(t.push(`import { ${e}Api } from "./${(0,l.default)(e)}-endpoints"`),o+=`export const add${(0,c.default)(e)}CacheKeys = () =>\n  ${e}Api.enhanceEndpoints({\n    endpoints: {\n${u.map((t=>{const i=t.includes("get")?"providesTags":"invalidatesTags";return`      ${t}: { ${i}: ["${e}"] },`})).join("\n")}\n    },\n  })\n`)}o=o.replace("IMPORT_STATEMENTS",t.map((e=>e)).join("\n")),o+=`export const addGeneratedCacheKeys = () => {\n  ${i.map((e=>`add${(0,c.default)(e)}CacheKeys()`)).join("\n")}\n}\n`,a.default.writeFileSync(`${e}/generated-cache-keys.ts`,o,{encoding:"utf8"}),console.info(`Generated ${e}/generated-cache-keys.ts`)}}t.GenerateCacheKeyFile=p,p.paths=[["generate-cache-key-file"]],p.usage=n.Command.Usage({category:"generators",description:"This script will generate the required cache key files for your redux webapp.",examples:[["A basic example","npm run stator-cli generate-cache-key-file"]]})},999:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GenerateEntityIndexFile=void 0;const o=i(752),a=(0,o.__importDefault)(i(147)),r=(0,o.__importDefault)(i(17)),n=i(733),s=i(638);class c extends s.Command{async execute(){const e=r.default.join(__dirname,"entity-index-hash.txt"),t=r.default.join(__dirname,"../libs/models/src/index.ts"),i={};for await(const e of(0,n.walk)(r.default.join(__dirname,"../libs/models/src/lib"),[])){const t=e.split("lib/")[1].split("/")[0];i[t]||(i[t]=[]),i[t].push(e)}let o="/**\n * This file was automatically generated by generate-entity-index.js file\n * You can disable the automatic generation by removing the prepare section of the workspace.json file under api section\n */\n\n";const s=Object.entries(i).sort().reduce(((e,[t,i])=>({...e,[t]:i})),{});for(const[e,t]of Object.entries(s))o+=`// ${e}\n`,o+=l(t),o+="\n";const c=a.default.existsSync(e),d=parseInt(c?await a.default.promises.readFile(e,{encoding:"utf8"}):""),p=function(e){let t,i,o=0;for(t=0;t<e.length;t++)i=e.charCodeAt(t),o=(o<<5)-o+i,o|=0;return o}(o);d!==p&&(await a.default.promises.writeFile(e,p.toString(),{encoding:"utf8"}),await a.default.promises.writeFile(t,o,{encoding:"utf8"}),console.info("Generated index file for shared entity library"))}}function l(e){return e.sort().map((e=>`export * from "./${e.split("src/")[1].replace(".ts","")}"\n`)).join("")}t.GenerateEntityIndexFile=c,c.paths=[["generate-entity-index-file"]],c.usage=s.Command.Usage({category:"generators",description:"This script will generate index file for the model library.",examples:[["A basic example","npm run stator-cli generate-entity-index-file"]]})},28:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RenameProject=void 0;const o=i(752),a=(0,o.__importDefault)(i(147)),r=(0,o.__importDefault)(i(17)),n=i(638),s=i(733);class c extends n.Command{constructor(){super(...arguments),this.organization=n.Option.String("--organization",{required:!0}),this.project=n.Option.String("--project",{required:!0})}async execute(){await this.renameProject()}async renameProject(){try{console.log(this.organization,this.project,__dirname),/^[a-zA-Z-\d_]+$/gim.test(this.organization)||(console.error("The organization name must respect this regex /^[a-zA-Z-\\d_]+$/gmi"),process.exit(1)),/^[a-zA-Z-\d_]+$/gim.test(this.project)||(console.error("The project name must respect this regex /^[a-zA-Z-\\d_]+$/gmi"),process.exit(1));const e=this.project.replace(/-/g,"_"),t=["docker-compose.yml","seed-data.js","init.sql","test.ts","orm-config.ts"],i=["node_modules","dist",".git",".idea",".cache"];for await(const o of(0,s.walk)(r.default.join(__dirname,"../"),i))if((await a.default.promises.lstat(o)).isFile()){const i=await a.default.promises.readFile(o,"utf-8");if(i){const r=t.some((e=>o.includes(e))),n=i.replace(/chocolat-chaud-io/gim,this.organization).replace(/stator/gim,r?e:this.project);await a.default.promises.writeFile(o,n,"utf-8")}}console.info("This is now YOUR project provided generously by:\n\n███████ ████████  █████  ████████  ██████  ██████ \n██         ██    ██   ██    ██    ██    ██ ██   ██ \n███████    ██    ███████    ██    ██    ██ ██████  \n     ██    ██    ██   ██    ██    ██    ██ ██   ██ \n███████    ██    ██   ██    ██     ██████  ██   ██ \n                                                   \n    ")}catch(e){console.error(e)}}}t.RenameProject=c,c.paths=[["rename-project"]],c.usage=n.Command.Usage({category:"getting-started",description:"This script will rename all occurrences of stator and chocolat-chaud with your own names.",examples:[["A basic example","npm run stator-cli rename-project --organization chocolat-chaud-io --project stator"]]})},733:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.walk=void 0;const o=i(752),a=(0,o.__importDefault)(i(147)),r=(0,o.__importDefault)(i(17));t.walk=async function*(e,i,o=[]){for await(const n of await a.default.promises.opendir(e)){const a=r.default.join(e,n.name);n.isDirectory()&&!i.includes(n.name)?(o.push(a),yield*(0,t.walk)(a,i,o)):n.isFile()&&(yield a)}}},638:e=>{"use strict";e.exports=require("clipanion")},897:e=>{"use strict";e.exports=require("lodash/camelCase")},969:e=>{"use strict";e.exports=require("lodash/capitalize")},546:e=>{"use strict";e.exports=require("lodash/kebabCase")},752:e=>{"use strict";e.exports=require("tslib")},147:e=>{"use strict";e.exports=require("fs")},17:e=>{"use strict";e.exports=require("path")}},t={};function i(o){var a=t[o];if(void 0!==a)return a.exports;var r=t[o]={exports:{}};return e[o](r,r.exports,i),r.exports}var o={};(()=>{var e=o;Object.defineProperty(e,"__esModule",{value:!0});const t=i(638),a=i(857),r=i(351),n=i(744),s=i(999),c=i(28),[,,...l]=process.argv,d=new t.Cli({binaryLabel:"stator-cli",binaryName:"npm run stator-cli",binaryVersion:"1.0.0"});d.register(c.RenameProject),d.register(n.GenerateCacheKeyFile),d.register(s.GenerateEntityIndexFile),d.register(r.EnforceValidImportsApi),d.register(a.EnforceFileFolderNamingConvention),d.register(t.Builtins.HelpCommand),d.runExit(l).catch(console.error)})();var a=exports;for(var r in o)a[r]=o[r];o.__esModule&&Object.defineProperty(a,"__esModule",{value:!0})})();
//# sourceMappingURL=main.js.map